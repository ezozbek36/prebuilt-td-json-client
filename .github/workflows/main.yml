name: Build TDLib

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

  workflow_dispatch:

jobs:
  build:
    name: Build TDLib (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    env:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
      CXXFLAGS: -stdlib=libc++
      DCMAKE_C_COMPILER_LAUNCHER: ccache
      DCMAKE_CXX_COMPILER_LAUNCHER: ccache
    strategy:
      fail-fast: true
      matrix:
        include:
          - platform: linux
            arch: x86_64
            os: ubuntu-22.04

          - platform: android
            arch: arm64-v8a
            os: ubuntu-22.04

          - platform: android
            arch: armeabi-v7a
            os: ubuntu-22.04

          - platform: android
            arch: x86_64
            os: ubuntu-22.04

          - platform: android
            arch: x86
            os: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 800MB
          key: ${{ runner.os }}-${{ matrix.platform }}-${{ matrix.arch }}

      - name: Install dependencies (Linux/Android)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y zlib1g-dev gperf

      - name: Configure & build BoringSSL
        if: matrix.platform == 'android'
        run: |
          cmake -Wno-deprecated -GNinja -B build-boringssl -S third_party/boringssl \
            -DBUILD_TESTING=OFF \
            -DBUILD_SHARED_LIBS=OFF \
            -DFUZZ=OFF \
            -DOPENSSL_SMALL=ON \
            -DOPENSSL_NO_ASM=ON \
            -DANDROID_ABI=${{ matrix.arch }} \
            -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake
          cmake --build build-boringssl

      - name: Configure build (Linux)
        if: matrix.platform == 'linux'
        run: cmake -GNinja -B build -S third_party/td -DCMAKE_BUILD_TYPE=Release

      - name: Configure build (Android)
        if: matrix.platform == 'android'
        run: |
          cmake -B build-sources -S third_party/td -DTD_GENERATE_SOURCE_FILES=ON
          cmake --build build-sources -j$(nproc)
          cmake -Wno-deprecated -GNinja -B build -S third_party/td \
            -DOPENSSL_FOUND=TRUE \
            -DOPENSSL_INCLUDE_DIR=$(realpath third_party/boringssl/include) \
            -DOPENSSL_CRYPTO_LIBRARY=$(realpath build-boringssl/libcrypto.a) \
            -DOPENSSL_SSL_LIBRARY=$(realpath build-boringssl/libssl.a) \
            -DANDROID_ABI=${{ matrix.arch }} \
            -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake

      - name: Build TDLib (Linux)
        if: matrix.platform == 'linux'
        run: |
          cd build
          cmake --build . --target prepare_cross_compiling -j$(nproc)
          cmake --build . --target tdjson -j$(nproc)

      - name: Build TDLib (Android)
        if: matrix.platform == 'android'
        run: |
          cmake --build build --target tdjson -j$(nproc)
          ${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-${HOSTTYPE}/bin/llvm-strip --strip-debug --strip-unneeded build/libtdjson.so -o build/libtdjson.so

      - name: Extract TDLib version
        id: td_version
        run: |
          LINE=$(grep -E "project\\s*\\(TDLib\\s+VERSION\\s+[0-9]+\\.[0-9]+\\.[0-9]+" third_party/td/CMakeLists.txt)
          VERSION=$(echo "$LINE" | sed -E 's/.*VERSION[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get TDLib commit hash
        id: td_commit
        run: |
          cd third_party/td
          COMMIT=$(git rev-parse HEAD)
          echo "commit=$COMMIT" >> "$GITHUB_OUTPUT"

      - name: Package build artifacts
        run: |
          mkdir -p artifacts/${{ matrix.platform }}
          cp build/libtdjson.so artifacts/${{ matrix.platform }}/${{ matrix.arch }} || true
          echo "${{ steps.td_version.outputs.version }}" > artifacts/version.txt
          echo "${{ steps.td_version.outputs.commit }}" > artifacts/commit.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tdlib-${{ matrix.platform }}-${{ matrix.arch }}
          path: artifacts

  release:
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2.4.1
        with:
          tag_name: v$(cat release-assets/version.txt)
          body: |
            ðŸ§± Prebuilt TDLib binaries
            - Version: `$(cat release-assets/version.txt)`
            - Commit: [`$(cat release-assets/version.txt)`](https://github.com/tdlib/td/tree/$(cat release-assets/version.txt))
          files: release-assets/**/*
